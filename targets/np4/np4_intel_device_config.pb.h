// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: np4_intel_device_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_np4_5fintel_5fdevice_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_np4_5fintel_5fdevice_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_np4_5fintel_5fdevice_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_np4_5fintel_5fdevice_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_np4_5fintel_5fdevice_5fconfig_2eproto;
namespace pi {
namespace np4 {
class DPDKConfig;
class DPDKConfigDefaultTypeInternal;
extern DPDKConfigDefaultTypeInternal _DPDKConfig_default_instance_;
class NP4DeviceConfig;
class NP4DeviceConfigDefaultTypeInternal;
extern NP4DeviceConfigDefaultTypeInternal _NP4DeviceConfig_default_instance_;
class NP4DeviceConfig_Atom;
class NP4DeviceConfig_AtomDefaultTypeInternal;
extern NP4DeviceConfig_AtomDefaultTypeInternal _NP4DeviceConfig_Atom_default_instance_;
class NP4DeviceConfig_Daemon;
class NP4DeviceConfig_DaemonDefaultTypeInternal;
extern NP4DeviceConfig_DaemonDefaultTypeInternal _NP4DeviceConfig_Daemon_default_instance_;
class NP4IntelDeviceConfig;
class NP4IntelDeviceConfigDefaultTypeInternal;
extern NP4IntelDeviceConfigDefaultTypeInternal _NP4IntelDeviceConfig_default_instance_;
}  // namespace np4
}  // namespace pi
PROTOBUF_NAMESPACE_OPEN
template<> ::pi::np4::DPDKConfig* Arena::CreateMaybeMessage<::pi::np4::DPDKConfig>(Arena*);
template<> ::pi::np4::NP4DeviceConfig* Arena::CreateMaybeMessage<::pi::np4::NP4DeviceConfig>(Arena*);
template<> ::pi::np4::NP4DeviceConfig_Atom* Arena::CreateMaybeMessage<::pi::np4::NP4DeviceConfig_Atom>(Arena*);
template<> ::pi::np4::NP4DeviceConfig_Daemon* Arena::CreateMaybeMessage<::pi::np4::NP4DeviceConfig_Daemon>(Arena*);
template<> ::pi::np4::NP4IntelDeviceConfig* Arena::CreateMaybeMessage<::pi::np4::NP4IntelDeviceConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pi {
namespace np4 {

// ===================================================================

class NP4DeviceConfig_Daemon :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pi.np4.NP4DeviceConfig.Daemon) */ {
 public:
  NP4DeviceConfig_Daemon();
  virtual ~NP4DeviceConfig_Daemon();

  NP4DeviceConfig_Daemon(const NP4DeviceConfig_Daemon& from);
  NP4DeviceConfig_Daemon(NP4DeviceConfig_Daemon&& from) noexcept
    : NP4DeviceConfig_Daemon() {
    *this = ::std::move(from);
  }

  inline NP4DeviceConfig_Daemon& operator=(const NP4DeviceConfig_Daemon& from) {
    CopyFrom(from);
    return *this;
  }
  inline NP4DeviceConfig_Daemon& operator=(NP4DeviceConfig_Daemon&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NP4DeviceConfig_Daemon& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NP4DeviceConfig_Daemon* internal_default_instance() {
    return reinterpret_cast<const NP4DeviceConfig_Daemon*>(
               &_NP4DeviceConfig_Daemon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NP4DeviceConfig_Daemon& a, NP4DeviceConfig_Daemon& b) {
    a.Swap(&b);
  }
  inline void Swap(NP4DeviceConfig_Daemon* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NP4DeviceConfig_Daemon* New() const final {
    return CreateMaybeMessage<NP4DeviceConfig_Daemon>(nullptr);
  }

  NP4DeviceConfig_Daemon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NP4DeviceConfig_Daemon>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NP4DeviceConfig_Daemon& from);
  void MergeFrom(const NP4DeviceConfig_Daemon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NP4DeviceConfig_Daemon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pi.np4.NP4DeviceConfig.Daemon";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_np4_5fintel_5fdevice_5fconfig_2eproto);
    return ::descriptor_table_np4_5fintel_5fdevice_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // string host = 1;
  void clear_host();
  const std::string& host() const;
  void set_host(const std::string& value);
  void set_host(std::string&& value);
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  std::string* mutable_host();
  std::string* release_host();
  void set_allocated_host(std::string* host);
  private:
  const std::string& _internal_host() const;
  void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // uint32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pi.np4.NP4DeviceConfig.Daemon)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_np4_5fintel_5fdevice_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class NP4DeviceConfig_Atom :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pi.np4.NP4DeviceConfig.Atom) */ {
 public:
  NP4DeviceConfig_Atom();
  virtual ~NP4DeviceConfig_Atom();

  NP4DeviceConfig_Atom(const NP4DeviceConfig_Atom& from);
  NP4DeviceConfig_Atom(NP4DeviceConfig_Atom&& from) noexcept
    : NP4DeviceConfig_Atom() {
    *this = ::std::move(from);
  }

  inline NP4DeviceConfig_Atom& operator=(const NP4DeviceConfig_Atom& from) {
    CopyFrom(from);
    return *this;
  }
  inline NP4DeviceConfig_Atom& operator=(NP4DeviceConfig_Atom&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NP4DeviceConfig_Atom& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NP4DeviceConfig_Atom* internal_default_instance() {
    return reinterpret_cast<const NP4DeviceConfig_Atom*>(
               &_NP4DeviceConfig_Atom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NP4DeviceConfig_Atom& a, NP4DeviceConfig_Atom& b) {
    a.Swap(&b);
  }
  inline void Swap(NP4DeviceConfig_Atom* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NP4DeviceConfig_Atom* New() const final {
    return CreateMaybeMessage<NP4DeviceConfig_Atom>(nullptr);
  }

  NP4DeviceConfig_Atom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NP4DeviceConfig_Atom>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NP4DeviceConfig_Atom& from);
  void MergeFrom(const NP4DeviceConfig_Atom& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NP4DeviceConfig_Atom* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pi.np4.NP4DeviceConfig.Atom";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_np4_5fintel_5fdevice_5fconfig_2eproto);
    return ::descriptor_table_np4_5fintel_5fdevice_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pi.np4.NP4DeviceConfig.Atom)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_np4_5fintel_5fdevice_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class NP4DeviceConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pi.np4.NP4DeviceConfig) */ {
 public:
  NP4DeviceConfig();
  virtual ~NP4DeviceConfig();

  NP4DeviceConfig(const NP4DeviceConfig& from);
  NP4DeviceConfig(NP4DeviceConfig&& from) noexcept
    : NP4DeviceConfig() {
    *this = ::std::move(from);
  }

  inline NP4DeviceConfig& operator=(const NP4DeviceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline NP4DeviceConfig& operator=(NP4DeviceConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NP4DeviceConfig& default_instance();

  enum DeviceCase {
    kPath = 1,
    kDaemon = 2,
    DEVICE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NP4DeviceConfig* internal_default_instance() {
    return reinterpret_cast<const NP4DeviceConfig*>(
               &_NP4DeviceConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NP4DeviceConfig& a, NP4DeviceConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(NP4DeviceConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NP4DeviceConfig* New() const final {
    return CreateMaybeMessage<NP4DeviceConfig>(nullptr);
  }

  NP4DeviceConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NP4DeviceConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NP4DeviceConfig& from);
  void MergeFrom(const NP4DeviceConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NP4DeviceConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pi.np4.NP4DeviceConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_np4_5fintel_5fdevice_5fconfig_2eproto);
    return ::descriptor_table_np4_5fintel_5fdevice_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef NP4DeviceConfig_Daemon Daemon;
  typedef NP4DeviceConfig_Atom Atom;

  // accessors -------------------------------------------------------

  enum : int {
    kFpgaBitstreamFieldNumber = 4,
    kAtomFieldNumber = 3,
    kPathFieldNumber = 1,
    kDaemonFieldNumber = 2,
  };
  // bytes fpga_bitstream = 4;
  void clear_fpga_bitstream();
  const std::string& fpga_bitstream() const;
  void set_fpga_bitstream(const std::string& value);
  void set_fpga_bitstream(std::string&& value);
  void set_fpga_bitstream(const char* value);
  void set_fpga_bitstream(const void* value, size_t size);
  std::string* mutable_fpga_bitstream();
  std::string* release_fpga_bitstream();
  void set_allocated_fpga_bitstream(std::string* fpga_bitstream);
  private:
  const std::string& _internal_fpga_bitstream() const;
  void _internal_set_fpga_bitstream(const std::string& value);
  std::string* _internal_mutable_fpga_bitstream();
  public:

  // .pi.np4.NP4DeviceConfig.Atom atom = 3;
  bool has_atom() const;
  private:
  bool _internal_has_atom() const;
  public:
  void clear_atom();
  const ::pi::np4::NP4DeviceConfig_Atom& atom() const;
  ::pi::np4::NP4DeviceConfig_Atom* release_atom();
  ::pi::np4::NP4DeviceConfig_Atom* mutable_atom();
  void set_allocated_atom(::pi::np4::NP4DeviceConfig_Atom* atom);
  private:
  const ::pi::np4::NP4DeviceConfig_Atom& _internal_atom() const;
  ::pi::np4::NP4DeviceConfig_Atom* _internal_mutable_atom();
  public:

  // string path = 1;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // .pi.np4.NP4DeviceConfig.Daemon daemon = 2;
  bool has_daemon() const;
  private:
  bool _internal_has_daemon() const;
  public:
  void clear_daemon();
  const ::pi::np4::NP4DeviceConfig_Daemon& daemon() const;
  ::pi::np4::NP4DeviceConfig_Daemon* release_daemon();
  ::pi::np4::NP4DeviceConfig_Daemon* mutable_daemon();
  void set_allocated_daemon(::pi::np4::NP4DeviceConfig_Daemon* daemon);
  private:
  const ::pi::np4::NP4DeviceConfig_Daemon& _internal_daemon() const;
  ::pi::np4::NP4DeviceConfig_Daemon* _internal_mutable_daemon();
  public:

  void clear_device();
  DeviceCase device_case() const;
  // @@protoc_insertion_point(class_scope:pi.np4.NP4DeviceConfig)
 private:
  class _Internal;
  void set_has_path();
  void set_has_daemon();

  inline bool has_device() const;
  inline void clear_has_device();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fpga_bitstream_;
  ::pi::np4::NP4DeviceConfig_Atom* atom_;
  union DeviceUnion {
    DeviceUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    ::pi::np4::NP4DeviceConfig_Daemon* daemon_;
  } device_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_np4_5fintel_5fdevice_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class DPDKConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pi.np4.DPDKConfig) */ {
 public:
  DPDKConfig();
  virtual ~DPDKConfig();

  DPDKConfig(const DPDKConfig& from);
  DPDKConfig(DPDKConfig&& from) noexcept
    : DPDKConfig() {
    *this = ::std::move(from);
  }

  inline DPDKConfig& operator=(const DPDKConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DPDKConfig& operator=(DPDKConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DPDKConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DPDKConfig* internal_default_instance() {
    return reinterpret_cast<const DPDKConfig*>(
               &_DPDKConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DPDKConfig& a, DPDKConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DPDKConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DPDKConfig* New() const final {
    return CreateMaybeMessage<DPDKConfig>(nullptr);
  }

  DPDKConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DPDKConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DPDKConfig& from);
  void MergeFrom(const DPDKConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DPDKConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pi.np4.DPDKConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_np4_5fintel_5fdevice_5fconfig_2eproto);
    return ::descriptor_table_np4_5fintel_5fdevice_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBdfFieldNumber = 1,
  };
  // string bdf = 1;
  void clear_bdf();
  const std::string& bdf() const;
  void set_bdf(const std::string& value);
  void set_bdf(std::string&& value);
  void set_bdf(const char* value);
  void set_bdf(const char* value, size_t size);
  std::string* mutable_bdf();
  std::string* release_bdf();
  void set_allocated_bdf(std::string* bdf);
  private:
  const std::string& _internal_bdf() const;
  void _internal_set_bdf(const std::string& value);
  std::string* _internal_mutable_bdf();
  public:

  // @@protoc_insertion_point(class_scope:pi.np4.DPDKConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bdf_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_np4_5fintel_5fdevice_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class NP4IntelDeviceConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pi.np4.NP4IntelDeviceConfig) */ {
 public:
  NP4IntelDeviceConfig();
  virtual ~NP4IntelDeviceConfig();

  NP4IntelDeviceConfig(const NP4IntelDeviceConfig& from);
  NP4IntelDeviceConfig(NP4IntelDeviceConfig&& from) noexcept
    : NP4IntelDeviceConfig() {
    *this = ::std::move(from);
  }

  inline NP4IntelDeviceConfig& operator=(const NP4IntelDeviceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline NP4IntelDeviceConfig& operator=(NP4IntelDeviceConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NP4IntelDeviceConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NP4IntelDeviceConfig* internal_default_instance() {
    return reinterpret_cast<const NP4IntelDeviceConfig*>(
               &_NP4IntelDeviceConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(NP4IntelDeviceConfig& a, NP4IntelDeviceConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(NP4IntelDeviceConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NP4IntelDeviceConfig* New() const final {
    return CreateMaybeMessage<NP4IntelDeviceConfig>(nullptr);
  }

  NP4IntelDeviceConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NP4IntelDeviceConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NP4IntelDeviceConfig& from);
  void MergeFrom(const NP4IntelDeviceConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NP4IntelDeviceConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pi.np4.NP4IntelDeviceConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_np4_5fintel_5fdevice_5fconfig_2eproto);
    return ::descriptor_table_np4_5fintel_5fdevice_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNp4DeviceFieldNumber = 2,
    kDpdkFieldNumber = 3,
    kNodeIdFieldNumber = 1,
  };
  // .pi.np4.NP4DeviceConfig np4_device = 2;
  bool has_np4_device() const;
  private:
  bool _internal_has_np4_device() const;
  public:
  void clear_np4_device();
  const ::pi::np4::NP4DeviceConfig& np4_device() const;
  ::pi::np4::NP4DeviceConfig* release_np4_device();
  ::pi::np4::NP4DeviceConfig* mutable_np4_device();
  void set_allocated_np4_device(::pi::np4::NP4DeviceConfig* np4_device);
  private:
  const ::pi::np4::NP4DeviceConfig& _internal_np4_device() const;
  ::pi::np4::NP4DeviceConfig* _internal_mutable_np4_device();
  public:

  // .pi.np4.DPDKConfig dpdk = 3;
  bool has_dpdk() const;
  private:
  bool _internal_has_dpdk() const;
  public:
  void clear_dpdk();
  const ::pi::np4::DPDKConfig& dpdk() const;
  ::pi::np4::DPDKConfig* release_dpdk();
  ::pi::np4::DPDKConfig* mutable_dpdk();
  void set_allocated_dpdk(::pi::np4::DPDKConfig* dpdk);
  private:
  const ::pi::np4::DPDKConfig& _internal_dpdk() const;
  ::pi::np4::DPDKConfig* _internal_mutable_dpdk();
  public:

  // uint64 node_id = 1;
  void clear_node_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 node_id() const;
  void set_node_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_node_id() const;
  void _internal_set_node_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:pi.np4.NP4IntelDeviceConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::pi::np4::NP4DeviceConfig* np4_device_;
  ::pi::np4::DPDKConfig* dpdk_;
  ::PROTOBUF_NAMESPACE_ID::uint64 node_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_np4_5fintel_5fdevice_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NP4DeviceConfig_Daemon

// string host = 1;
inline void NP4DeviceConfig_Daemon::clear_host() {
  host_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NP4DeviceConfig_Daemon::host() const {
  // @@protoc_insertion_point(field_get:pi.np4.NP4DeviceConfig.Daemon.host)
  return _internal_host();
}
inline void NP4DeviceConfig_Daemon::set_host(const std::string& value) {
  _internal_set_host(value);
  // @@protoc_insertion_point(field_set:pi.np4.NP4DeviceConfig.Daemon.host)
}
inline std::string* NP4DeviceConfig_Daemon::mutable_host() {
  // @@protoc_insertion_point(field_mutable:pi.np4.NP4DeviceConfig.Daemon.host)
  return _internal_mutable_host();
}
inline const std::string& NP4DeviceConfig_Daemon::_internal_host() const {
  return host_.GetNoArena();
}
inline void NP4DeviceConfig_Daemon::_internal_set_host(const std::string& value) {
  
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NP4DeviceConfig_Daemon::set_host(std::string&& value) {
  
  host_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pi.np4.NP4DeviceConfig.Daemon.host)
}
inline void NP4DeviceConfig_Daemon::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pi.np4.NP4DeviceConfig.Daemon.host)
}
inline void NP4DeviceConfig_Daemon::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pi.np4.NP4DeviceConfig.Daemon.host)
}
inline std::string* NP4DeviceConfig_Daemon::_internal_mutable_host() {
  
  return host_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NP4DeviceConfig_Daemon::release_host() {
  // @@protoc_insertion_point(field_release:pi.np4.NP4DeviceConfig.Daemon.host)
  
  return host_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NP4DeviceConfig_Daemon::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:pi.np4.NP4DeviceConfig.Daemon.host)
}

// uint32 port = 2;
inline void NP4DeviceConfig_Daemon::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NP4DeviceConfig_Daemon::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NP4DeviceConfig_Daemon::port() const {
  // @@protoc_insertion_point(field_get:pi.np4.NP4DeviceConfig.Daemon.port)
  return _internal_port();
}
inline void NP4DeviceConfig_Daemon::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void NP4DeviceConfig_Daemon::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:pi.np4.NP4DeviceConfig.Daemon.port)
}

// -------------------------------------------------------------------

// NP4DeviceConfig_Atom

// uint32 id = 1;
inline void NP4DeviceConfig_Atom::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NP4DeviceConfig_Atom::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NP4DeviceConfig_Atom::id() const {
  // @@protoc_insertion_point(field_get:pi.np4.NP4DeviceConfig.Atom.id)
  return _internal_id();
}
inline void NP4DeviceConfig_Atom::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void NP4DeviceConfig_Atom::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pi.np4.NP4DeviceConfig.Atom.id)
}

// -------------------------------------------------------------------

// NP4DeviceConfig

// string path = 1;
inline bool NP4DeviceConfig::_internal_has_path() const {
  return device_case() == kPath;
}
inline void NP4DeviceConfig::set_has_path() {
  _oneof_case_[0] = kPath;
}
inline void NP4DeviceConfig::clear_path() {
  if (_internal_has_path()) {
    device_.path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_device();
  }
}
inline const std::string& NP4DeviceConfig::path() const {
  // @@protoc_insertion_point(field_get:pi.np4.NP4DeviceConfig.path)
  return _internal_path();
}
inline void NP4DeviceConfig::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:pi.np4.NP4DeviceConfig.path)
}
inline std::string* NP4DeviceConfig::mutable_path() {
  // @@protoc_insertion_point(field_mutable:pi.np4.NP4DeviceConfig.path)
  return _internal_mutable_path();
}
inline const std::string& NP4DeviceConfig::_internal_path() const {
  if (_internal_has_path()) {
    return device_.path_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void NP4DeviceConfig::_internal_set_path(const std::string& value) {
  if (!_internal_has_path()) {
    clear_device();
    set_has_path();
    device_.path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  device_.path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NP4DeviceConfig::set_path(std::string&& value) {
  // @@protoc_insertion_point(field_set:pi.np4.NP4DeviceConfig.path)
  if (!_internal_has_path()) {
    clear_device();
    set_has_path();
    device_.path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  device_.path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pi.np4.NP4DeviceConfig.path)
}
inline void NP4DeviceConfig::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_path()) {
    clear_device();
    set_has_path();
    device_.path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  device_.path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pi.np4.NP4DeviceConfig.path)
}
inline void NP4DeviceConfig::set_path(const char* value, size_t size) {
  if (!_internal_has_path()) {
    clear_device();
    set_has_path();
    device_.path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  device_.path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pi.np4.NP4DeviceConfig.path)
}
inline std::string* NP4DeviceConfig::_internal_mutable_path() {
  if (!_internal_has_path()) {
    clear_device();
    set_has_path();
    device_.path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return device_.path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NP4DeviceConfig::release_path() {
  // @@protoc_insertion_point(field_release:pi.np4.NP4DeviceConfig.path)
  if (_internal_has_path()) {
    clear_has_device();
    return device_.path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void NP4DeviceConfig::set_allocated_path(std::string* path) {
  if (has_device()) {
    clear_device();
  }
  if (path != nullptr) {
    set_has_path();
    device_.path_.UnsafeSetDefault(path);
  }
  // @@protoc_insertion_point(field_set_allocated:pi.np4.NP4DeviceConfig.path)
}

// .pi.np4.NP4DeviceConfig.Daemon daemon = 2;
inline bool NP4DeviceConfig::_internal_has_daemon() const {
  return device_case() == kDaemon;
}
inline bool NP4DeviceConfig::has_daemon() const {
  return _internal_has_daemon();
}
inline void NP4DeviceConfig::set_has_daemon() {
  _oneof_case_[0] = kDaemon;
}
inline void NP4DeviceConfig::clear_daemon() {
  if (_internal_has_daemon()) {
    delete device_.daemon_;
    clear_has_device();
  }
}
inline ::pi::np4::NP4DeviceConfig_Daemon* NP4DeviceConfig::release_daemon() {
  // @@protoc_insertion_point(field_release:pi.np4.NP4DeviceConfig.daemon)
  if (has_daemon()) {
    clear_has_device();
      ::pi::np4::NP4DeviceConfig_Daemon* temp = device_.daemon_;
    device_.daemon_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pi::np4::NP4DeviceConfig_Daemon& NP4DeviceConfig::_internal_daemon() const {
  return _internal_has_daemon()
      ? *device_.daemon_
      : *reinterpret_cast< ::pi::np4::NP4DeviceConfig_Daemon*>(&::pi::np4::_NP4DeviceConfig_Daemon_default_instance_);
}
inline const ::pi::np4::NP4DeviceConfig_Daemon& NP4DeviceConfig::daemon() const {
  // @@protoc_insertion_point(field_get:pi.np4.NP4DeviceConfig.daemon)
  return _internal_daemon();
}
inline ::pi::np4::NP4DeviceConfig_Daemon* NP4DeviceConfig::_internal_mutable_daemon() {
  if (!_internal_has_daemon()) {
    clear_device();
    set_has_daemon();
    device_.daemon_ = CreateMaybeMessage< ::pi::np4::NP4DeviceConfig_Daemon >(
        GetArenaNoVirtual());
  }
  return device_.daemon_;
}
inline ::pi::np4::NP4DeviceConfig_Daemon* NP4DeviceConfig::mutable_daemon() {
  // @@protoc_insertion_point(field_mutable:pi.np4.NP4DeviceConfig.daemon)
  return _internal_mutable_daemon();
}

// .pi.np4.NP4DeviceConfig.Atom atom = 3;
inline bool NP4DeviceConfig::_internal_has_atom() const {
  return this != internal_default_instance() && atom_ != nullptr;
}
inline bool NP4DeviceConfig::has_atom() const {
  return _internal_has_atom();
}
inline void NP4DeviceConfig::clear_atom() {
  if (GetArenaNoVirtual() == nullptr && atom_ != nullptr) {
    delete atom_;
  }
  atom_ = nullptr;
}
inline const ::pi::np4::NP4DeviceConfig_Atom& NP4DeviceConfig::_internal_atom() const {
  const ::pi::np4::NP4DeviceConfig_Atom* p = atom_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pi::np4::NP4DeviceConfig_Atom*>(
      &::pi::np4::_NP4DeviceConfig_Atom_default_instance_);
}
inline const ::pi::np4::NP4DeviceConfig_Atom& NP4DeviceConfig::atom() const {
  // @@protoc_insertion_point(field_get:pi.np4.NP4DeviceConfig.atom)
  return _internal_atom();
}
inline ::pi::np4::NP4DeviceConfig_Atom* NP4DeviceConfig::release_atom() {
  // @@protoc_insertion_point(field_release:pi.np4.NP4DeviceConfig.atom)
  
  ::pi::np4::NP4DeviceConfig_Atom* temp = atom_;
  atom_ = nullptr;
  return temp;
}
inline ::pi::np4::NP4DeviceConfig_Atom* NP4DeviceConfig::_internal_mutable_atom() {
  
  if (atom_ == nullptr) {
    auto* p = CreateMaybeMessage<::pi::np4::NP4DeviceConfig_Atom>(GetArenaNoVirtual());
    atom_ = p;
  }
  return atom_;
}
inline ::pi::np4::NP4DeviceConfig_Atom* NP4DeviceConfig::mutable_atom() {
  // @@protoc_insertion_point(field_mutable:pi.np4.NP4DeviceConfig.atom)
  return _internal_mutable_atom();
}
inline void NP4DeviceConfig::set_allocated_atom(::pi::np4::NP4DeviceConfig_Atom* atom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete atom_;
  }
  if (atom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      atom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, atom, submessage_arena);
    }
    
  } else {
    
  }
  atom_ = atom;
  // @@protoc_insertion_point(field_set_allocated:pi.np4.NP4DeviceConfig.atom)
}

// bytes fpga_bitstream = 4;
inline void NP4DeviceConfig::clear_fpga_bitstream() {
  fpga_bitstream_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NP4DeviceConfig::fpga_bitstream() const {
  // @@protoc_insertion_point(field_get:pi.np4.NP4DeviceConfig.fpga_bitstream)
  return _internal_fpga_bitstream();
}
inline void NP4DeviceConfig::set_fpga_bitstream(const std::string& value) {
  _internal_set_fpga_bitstream(value);
  // @@protoc_insertion_point(field_set:pi.np4.NP4DeviceConfig.fpga_bitstream)
}
inline std::string* NP4DeviceConfig::mutable_fpga_bitstream() {
  // @@protoc_insertion_point(field_mutable:pi.np4.NP4DeviceConfig.fpga_bitstream)
  return _internal_mutable_fpga_bitstream();
}
inline const std::string& NP4DeviceConfig::_internal_fpga_bitstream() const {
  return fpga_bitstream_.GetNoArena();
}
inline void NP4DeviceConfig::_internal_set_fpga_bitstream(const std::string& value) {
  
  fpga_bitstream_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NP4DeviceConfig::set_fpga_bitstream(std::string&& value) {
  
  fpga_bitstream_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pi.np4.NP4DeviceConfig.fpga_bitstream)
}
inline void NP4DeviceConfig::set_fpga_bitstream(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fpga_bitstream_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pi.np4.NP4DeviceConfig.fpga_bitstream)
}
inline void NP4DeviceConfig::set_fpga_bitstream(const void* value, size_t size) {
  
  fpga_bitstream_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pi.np4.NP4DeviceConfig.fpga_bitstream)
}
inline std::string* NP4DeviceConfig::_internal_mutable_fpga_bitstream() {
  
  return fpga_bitstream_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NP4DeviceConfig::release_fpga_bitstream() {
  // @@protoc_insertion_point(field_release:pi.np4.NP4DeviceConfig.fpga_bitstream)
  
  return fpga_bitstream_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NP4DeviceConfig::set_allocated_fpga_bitstream(std::string* fpga_bitstream) {
  if (fpga_bitstream != nullptr) {
    
  } else {
    
  }
  fpga_bitstream_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fpga_bitstream);
  // @@protoc_insertion_point(field_set_allocated:pi.np4.NP4DeviceConfig.fpga_bitstream)
}

inline bool NP4DeviceConfig::has_device() const {
  return device_case() != DEVICE_NOT_SET;
}
inline void NP4DeviceConfig::clear_has_device() {
  _oneof_case_[0] = DEVICE_NOT_SET;
}
inline NP4DeviceConfig::DeviceCase NP4DeviceConfig::device_case() const {
  return NP4DeviceConfig::DeviceCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DPDKConfig

// string bdf = 1;
inline void DPDKConfig::clear_bdf() {
  bdf_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DPDKConfig::bdf() const {
  // @@protoc_insertion_point(field_get:pi.np4.DPDKConfig.bdf)
  return _internal_bdf();
}
inline void DPDKConfig::set_bdf(const std::string& value) {
  _internal_set_bdf(value);
  // @@protoc_insertion_point(field_set:pi.np4.DPDKConfig.bdf)
}
inline std::string* DPDKConfig::mutable_bdf() {
  // @@protoc_insertion_point(field_mutable:pi.np4.DPDKConfig.bdf)
  return _internal_mutable_bdf();
}
inline const std::string& DPDKConfig::_internal_bdf() const {
  return bdf_.GetNoArena();
}
inline void DPDKConfig::_internal_set_bdf(const std::string& value) {
  
  bdf_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DPDKConfig::set_bdf(std::string&& value) {
  
  bdf_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pi.np4.DPDKConfig.bdf)
}
inline void DPDKConfig::set_bdf(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bdf_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pi.np4.DPDKConfig.bdf)
}
inline void DPDKConfig::set_bdf(const char* value, size_t size) {
  
  bdf_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pi.np4.DPDKConfig.bdf)
}
inline std::string* DPDKConfig::_internal_mutable_bdf() {
  
  return bdf_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DPDKConfig::release_bdf() {
  // @@protoc_insertion_point(field_release:pi.np4.DPDKConfig.bdf)
  
  return bdf_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DPDKConfig::set_allocated_bdf(std::string* bdf) {
  if (bdf != nullptr) {
    
  } else {
    
  }
  bdf_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bdf);
  // @@protoc_insertion_point(field_set_allocated:pi.np4.DPDKConfig.bdf)
}

// -------------------------------------------------------------------

// NP4IntelDeviceConfig

// uint64 node_id = 1;
inline void NP4IntelDeviceConfig::clear_node_id() {
  node_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NP4IntelDeviceConfig::_internal_node_id() const {
  return node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NP4IntelDeviceConfig::node_id() const {
  // @@protoc_insertion_point(field_get:pi.np4.NP4IntelDeviceConfig.node_id)
  return _internal_node_id();
}
inline void NP4IntelDeviceConfig::_internal_set_node_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  node_id_ = value;
}
inline void NP4IntelDeviceConfig::set_node_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:pi.np4.NP4IntelDeviceConfig.node_id)
}

// .pi.np4.NP4DeviceConfig np4_device = 2;
inline bool NP4IntelDeviceConfig::_internal_has_np4_device() const {
  return this != internal_default_instance() && np4_device_ != nullptr;
}
inline bool NP4IntelDeviceConfig::has_np4_device() const {
  return _internal_has_np4_device();
}
inline void NP4IntelDeviceConfig::clear_np4_device() {
  if (GetArenaNoVirtual() == nullptr && np4_device_ != nullptr) {
    delete np4_device_;
  }
  np4_device_ = nullptr;
}
inline const ::pi::np4::NP4DeviceConfig& NP4IntelDeviceConfig::_internal_np4_device() const {
  const ::pi::np4::NP4DeviceConfig* p = np4_device_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pi::np4::NP4DeviceConfig*>(
      &::pi::np4::_NP4DeviceConfig_default_instance_);
}
inline const ::pi::np4::NP4DeviceConfig& NP4IntelDeviceConfig::np4_device() const {
  // @@protoc_insertion_point(field_get:pi.np4.NP4IntelDeviceConfig.np4_device)
  return _internal_np4_device();
}
inline ::pi::np4::NP4DeviceConfig* NP4IntelDeviceConfig::release_np4_device() {
  // @@protoc_insertion_point(field_release:pi.np4.NP4IntelDeviceConfig.np4_device)
  
  ::pi::np4::NP4DeviceConfig* temp = np4_device_;
  np4_device_ = nullptr;
  return temp;
}
inline ::pi::np4::NP4DeviceConfig* NP4IntelDeviceConfig::_internal_mutable_np4_device() {
  
  if (np4_device_ == nullptr) {
    auto* p = CreateMaybeMessage<::pi::np4::NP4DeviceConfig>(GetArenaNoVirtual());
    np4_device_ = p;
  }
  return np4_device_;
}
inline ::pi::np4::NP4DeviceConfig* NP4IntelDeviceConfig::mutable_np4_device() {
  // @@protoc_insertion_point(field_mutable:pi.np4.NP4IntelDeviceConfig.np4_device)
  return _internal_mutable_np4_device();
}
inline void NP4IntelDeviceConfig::set_allocated_np4_device(::pi::np4::NP4DeviceConfig* np4_device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete np4_device_;
  }
  if (np4_device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      np4_device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, np4_device, submessage_arena);
    }
    
  } else {
    
  }
  np4_device_ = np4_device;
  // @@protoc_insertion_point(field_set_allocated:pi.np4.NP4IntelDeviceConfig.np4_device)
}

// .pi.np4.DPDKConfig dpdk = 3;
inline bool NP4IntelDeviceConfig::_internal_has_dpdk() const {
  return this != internal_default_instance() && dpdk_ != nullptr;
}
inline bool NP4IntelDeviceConfig::has_dpdk() const {
  return _internal_has_dpdk();
}
inline void NP4IntelDeviceConfig::clear_dpdk() {
  if (GetArenaNoVirtual() == nullptr && dpdk_ != nullptr) {
    delete dpdk_;
  }
  dpdk_ = nullptr;
}
inline const ::pi::np4::DPDKConfig& NP4IntelDeviceConfig::_internal_dpdk() const {
  const ::pi::np4::DPDKConfig* p = dpdk_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pi::np4::DPDKConfig*>(
      &::pi::np4::_DPDKConfig_default_instance_);
}
inline const ::pi::np4::DPDKConfig& NP4IntelDeviceConfig::dpdk() const {
  // @@protoc_insertion_point(field_get:pi.np4.NP4IntelDeviceConfig.dpdk)
  return _internal_dpdk();
}
inline ::pi::np4::DPDKConfig* NP4IntelDeviceConfig::release_dpdk() {
  // @@protoc_insertion_point(field_release:pi.np4.NP4IntelDeviceConfig.dpdk)
  
  ::pi::np4::DPDKConfig* temp = dpdk_;
  dpdk_ = nullptr;
  return temp;
}
inline ::pi::np4::DPDKConfig* NP4IntelDeviceConfig::_internal_mutable_dpdk() {
  
  if (dpdk_ == nullptr) {
    auto* p = CreateMaybeMessage<::pi::np4::DPDKConfig>(GetArenaNoVirtual());
    dpdk_ = p;
  }
  return dpdk_;
}
inline ::pi::np4::DPDKConfig* NP4IntelDeviceConfig::mutable_dpdk() {
  // @@protoc_insertion_point(field_mutable:pi.np4.NP4IntelDeviceConfig.dpdk)
  return _internal_mutable_dpdk();
}
inline void NP4IntelDeviceConfig::set_allocated_dpdk(::pi::np4::DPDKConfig* dpdk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dpdk_;
  }
  if (dpdk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dpdk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dpdk, submessage_arena);
    }
    
  } else {
    
  }
  dpdk_ = dpdk;
  // @@protoc_insertion_point(field_set_allocated:pi.np4.NP4IntelDeviceConfig.dpdk)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace np4
}  // namespace pi

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_np4_5fintel_5fdevice_5fconfig_2eproto
